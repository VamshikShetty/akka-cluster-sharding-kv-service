/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.akka.sharding.kv.spring.api;

import com.example.akka.sharding.kv.spring.model.ResponseStored;
import com.example.akka.sharding.kv.spring.model.StoreKv;
import com.example.akka.sharding.kv.spring.model.StoredValue;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "db", description = "Operations related to fetching and storing KV pairs.")
@RequestMapping("${openapi.inMemoryKVAkkaStoreOpenAPI30.base-path:}")
public interface DbApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /db/kv/put : Store key-value
     * Add new key-value pair into DB
     *
     * @param storeKv put key-value in data store. (optional)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "addKeyValue",
        summary = "Store key-value",
        tags = { "kv-store" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseStored.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/db/kv/put",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseStored> addKeyValue(
        @Parameter(name = "StoreKv", description = "put key-value in data store.") @Valid @RequestBody(required = false) StoreKv storeKv
    ) {
        return storeValue(storeKv.getKey(), storeKv.getValue());
    }


    /**
     * GET /db/kv/get : Fetch stored value
     * Get stored value via key from DB
     *
     * @param key  (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "fetchValue",
        summary = "Fetch stored value",
        tags = { "kv-store" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StoredValue.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/db/kv/get",
        produces = { "application/json" }
    )
    default ResponseEntity<StoredValue> fetchValue(
        @NotNull @Parameter(name = "key", description = "", required = true) @Valid @RequestParam(value = "key", required = true) String key
    ) {
        return getStoredValue(key);
    }

    public ResponseEntity<StoredValue> getStoredValue(String key);
    public ResponseEntity<ResponseStored> storeValue(String key, String value);
}
